// Generated by CoffeeScript 1.4.0
(function() {
  var AWS, Config, Pile, Promise, bluebird, civi, d, debug, https, slack, sqs,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  bluebird = require('bluebird');

  Promise = bluebird.Promise;

  https = require('https');

  AWS = require('aws-sdk');

  sqs = new AWS.SQS({
    region: 'us-west-1'
  });

  Config = {
    civi_queue: process.env['CIVI_QUEUE'],
    slack_queue: process.env['SLACK_QUEUE'],
    debug_queue: process.env['DEBUG_QUEUE'],
    token: process.env['TOKEN'],
    civi_types: ["member.deleted", "petition.launched", "petition.updated", "event.created", "event.updated", "signature.created", "signature.deleted", "signature.confirmed", "unsubscribe.created", "attendee.created", "attendee.updated"],
    slack_types: ["blast_email.created", "event.created", "event.updated", "local_chapter.organiser_request.created", "petition.flagged", "petition.launched", "petition.launched.ham", "petition.launched.requires_moderation", "petition.reactivated", "petition.updated", "petition.updated.requires_moderation"]
  };

  d = function(o) {
    return JSON.stringify(o);
  };

  Pile = (function() {

    function Pile(queue_url, types) {
      this.url = queue_url;
      this.pile_types = types;
    }

    Pile.prototype.result = function(err, data) {
      return console.log("SQS error is " + err + ", data is " + (d(data)));
    };

    Pile.prototype.pile = function(obj, callback) {
      var _this = this;
      return new Promise(function(ok, fail) {
        return sqs.sendMessage({
          MessageBody: JSON.stringify(obj),
          QueueUrl: _this.url
        }, function(err, data) {
          if (err) {
            console.error("SQS error piling msg: " + err);
            return fail(err);
          } else {
            return ok("OK for " + _this.url);
          }
        });
      });
    };

    Pile.prototype.event = function(event) {
      var _ref;
      console.log("event: " + (d(event)));
      if (_ref = event.type, __indexOf.call(this.pile_types, _ref) >= 0) {
        return this.pile(event);
      } else {
        return false;
      }
    };

    return Pile;

  })();

  civi = new Pile(Config.civi_queue, Config.civi_types);

  slack = new Pile(Config.slack_queue, Config.slack_types);

  debug = new Pile(Config.debug_queue, Config.civi_types.concat(Config.slack_types));

  exports.event = function(event, context, callback) {
    var _this = this;
    return Promise.all([civi.event(event), slack.event(event), debug.event(event)]).then(function(x) {
      console.info(x);
      return callback(null);
    })["catch"](function(errors) {
      return callback("Pile error " + JSON.stringify(errors));
    });
  };

}).call(this);
